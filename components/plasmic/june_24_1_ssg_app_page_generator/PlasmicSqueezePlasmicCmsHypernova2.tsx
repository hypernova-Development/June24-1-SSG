// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3Fx1YzyaCEQxPjBKKp2mtC
// Component: KG7jAxeGzeWX

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import CmsEntryEditableField from "../../CmsEntryEditableField"; // plasmic-import: -X2JPG3VaqQ0/component
import TextInput from "../../TextInput"; // plasmic-import: 3r4TxCxZZuIK5/component
import Button from "../../Button"; // plasmic-import: VGxgH9M5y5qbv/component
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms";
import { CmsRowField } from "@plasmicpkgs/plasmic-cms";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";

import { useScreenVariants as useScreenVariantsk7Edbol5KzEm } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: K7EDBOL5KzEM/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import plasmic_legacy_feed_page_designs_css from "../legacy_feed_page_designs/plasmic.module.css"; // plasmic-import: dMaiZmvKdpJ4pWYeCQn3zc/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 3Fx1YzyaCEQxPjBKKp2mtC/projectcss
import sty from "./PlasmicSqueezePlasmicCmsHypernova2.module.css"; // plasmic-import: KG7jAxeGzeWX/css

import SearchsvgIcon from "../legacy_feed_page_designs/icons/PlasmicIcon__Searchsvg"; // plasmic-import: CRyUolhDoWvR1TU/icon
import ChecksvgIcon from "../legacy_feed_page_designs/icons/PlasmicIcon__Checksvg"; // plasmic-import: JKXZQCGXOZJezuA/icon

createPlasmicElementProxy;

export type PlasmicSqueezePlasmicCmsHypernova2__VariantMembers = {};
export type PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs = {};
type VariantPropType = keyof PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs;
export const PlasmicSqueezePlasmicCmsHypernova2__VariantProps =
  new Array<VariantPropType>();

export type PlasmicSqueezePlasmicCmsHypernova2__ArgsType = {
  slug?: string;
};
type ArgPropType = keyof PlasmicSqueezePlasmicCmsHypernova2__ArgsType;
export const PlasmicSqueezePlasmicCmsHypernova2__ArgProps =
  new Array<ArgPropType>("slug");

export type PlasmicSqueezePlasmicCmsHypernova2__OverridesType = {
  root?: Flex__<"div">;
  leftColumn?: Flex__<"div">;
  logo2?: Flex__<typeof CmsEntryEditableField>;
  rightColumnMobileOnly?: Flex__<"div">;
  image14?: Flex__<typeof CmsEntryEditableField>;
  text74?: Flex__<typeof CmsEntryEditableField>;
  text84?: Flex__<typeof CmsEntryEditableField>;
  iconValue12?: Flex__<"div">;
  image23?: Flex__<typeof CmsEntryEditableField>;
  text93?: Flex__<typeof CmsEntryEditableField>;
  image33?: Flex__<typeof CmsEntryEditableField>;
  text103?: Flex__<typeof CmsEntryEditableField>;
  image43?: Flex__<typeof CmsEntryEditableField>;
  text113?: Flex__<typeof CmsEntryEditableField>;
  text14?: Flex__<typeof CmsEntryEditableField>;
  text23?: Flex__<typeof CmsEntryEditableField>;
  text32?: Flex__<typeof CmsEntryEditableField>;
  form?: Flex__<"form">;
  text43?: Flex__<typeof TextInput>;
  text53?: Flex__<typeof TextInput>;
  text63?: Flex__<typeof Button>;
  text22Old2?: Flex__<typeof CmsQueryRepeater>;
  cmsEntryField?: Flex__<typeof CmsRowField>;
  text?: Flex__<"div">;
  embedHtml?: Flex__<typeof Embed>;
  text223?: Flex__<typeof CmsEntryEditableField>;
  disclaimer5?: Flex__<"div">;
  rightColumnDesktopOnly?: Flex__<"div">;
  image13?: Flex__<typeof CmsEntryEditableField>;
  text73?: Flex__<typeof CmsEntryEditableField>;
  text83?: Flex__<typeof CmsEntryEditableField>;
  iconValue11?: Flex__<"div">;
  image22?: Flex__<typeof CmsEntryEditableField>;
  text92?: Flex__<typeof CmsEntryEditableField>;
  image32?: Flex__<typeof CmsEntryEditableField>;
  text102?: Flex__<typeof CmsEntryEditableField>;
  image42?: Flex__<typeof CmsEntryEditableField>;
  text112?: Flex__<typeof CmsEntryEditableField>;
};

export interface DefaultSqueezePlasmicCmsHypernova2Props {
  slug?: string;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSqueezePlasmicCmsHypernova2__RenderFunc(props: {
  variants: PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs;
  args: PlasmicSqueezePlasmicCmsHypernova2__ArgsType;
  overrides: PlasmicSqueezePlasmicCmsHypernova2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "text43.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "text53.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsk7Edbol5KzEm()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        plasmic_legacy_feed_page_designs_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__as0Fb)}>
        <div
          data-plasmic-name={"leftColumn"}
          data-plasmic-override={overrides.leftColumn}
          className={classNames(projectcss.all, sty.leftColumn)}
        >
          <CmsEntryEditableField
            data-plasmic-name={"logo2"}
            data-plasmic-override={overrides.logo2}
            className={classNames("__wab_instance", sty.logo2)}
            field={"logo"}
            slug={args.slug}
            type={"image"}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <div
              data-plasmic-name={"rightColumnMobileOnly"}
              data-plasmic-override={overrides.rightColumnMobileOnly}
              className={classNames(projectcss.all, sty.rightColumnMobileOnly)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__fRt7H)}>
                <CmsEntryEditableField
                  data-plasmic-name={"image14"}
                  data-plasmic-override={overrides.image14}
                  borderRadius={"_10Px"}
                  className={classNames("__wab_instance", sty.image14)}
                  field={"image1"}
                  slug={args.slug}
                  type={"image"}
                />

                <div className={classNames(projectcss.all, sty.freeBox__yfSrs)}>
                  <CmsEntryEditableField
                    data-plasmic-name={"text74"}
                    data-plasmic-override={overrides.text74}
                    className={classNames("__wab_instance", sty.text74)}
                    field={"text7"}
                    fontSize={"_25Px"}
                    fontWeight={"bold"}
                    slug={args.slug}
                    type={"text"}
                  />

                  <CmsEntryEditableField
                    data-plasmic-name={"text84"}
                    data-plasmic-override={overrides.text84}
                    className={classNames("__wab_instance", sty.text84)}
                    color={"darkGrey"}
                    field={"text8"}
                    fontSize={"_16Px"}
                    fontWeight={"normal"}
                    slug={args.slug}
                    type={"text"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__u9Lwi)} />

              <div
                data-plasmic-name={"iconValue12"}
                data-plasmic-override={overrides.iconValue12}
                className={classNames(projectcss.all, sty.iconValue12)}
              >
                <div className={classNames(projectcss.all, sty.freeBox___5Asy)}>
                  <CmsEntryEditableField
                    data-plasmic-name={"image23"}
                    data-plasmic-override={overrides.image23}
                    className={classNames("__wab_instance", sty.image23)}
                    field={"image2"}
                    slug={args.slug}
                    type={"image"}
                  />

                  <CmsEntryEditableField
                    data-plasmic-name={"text93"}
                    data-plasmic-override={overrides.text93}
                    className={classNames("__wab_instance", sty.text93)}
                    color={"darkGrey"}
                    field={"text9"}
                    fontSize={"_18Px"}
                    fontWeight={"normal"}
                    slug={args.slug}
                    type={"text"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__ie44U)}>
                  <CmsEntryEditableField
                    data-plasmic-name={"image33"}
                    data-plasmic-override={overrides.image33}
                    className={classNames("__wab_instance", sty.image33)}
                    field={"image2"}
                    slug={args.slug}
                    type={"image"}
                  />

                  <CmsEntryEditableField
                    data-plasmic-name={"text103"}
                    data-plasmic-override={overrides.text103}
                    className={classNames("__wab_instance", sty.text103)}
                    color={"darkGrey"}
                    field={"text10"}
                    fontSize={"_18Px"}
                    fontWeight={"normal"}
                    slug={args.slug}
                    type={"text"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__rGFb)}>
                  <CmsEntryEditableField
                    data-plasmic-name={"image43"}
                    data-plasmic-override={overrides.image43}
                    className={classNames("__wab_instance", sty.image43)}
                    field={"image2"}
                    slug={args.slug}
                    type={"image"}
                  />

                  <CmsEntryEditableField
                    data-plasmic-name={"text113"}
                    data-plasmic-override={overrides.text113}
                    className={classNames("__wab_instance", sty.text113)}
                    color={"darkGrey"}
                    field={"text11"}
                    fontSize={"_18Px"}
                    fontWeight={"normal"}
                    slug={args.slug}
                    type={"text"}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__oEzqJ)} />
            </div>
          ) : null}
          <CmsEntryEditableField
            data-plasmic-name={"text14"}
            data-plasmic-override={overrides.text14}
            className={classNames("__wab_instance", sty.text14)}
            field={"text1"}
            slug={args.slug}
            type={"text"}
          />

          <CmsEntryEditableField
            data-plasmic-name={"text23"}
            data-plasmic-override={overrides.text23}
            className={classNames("__wab_instance", sty.text23)}
            color={"black"}
            field={"text2"}
            fontSize={"_22Px"}
            fontWeight={"medium"}
            slug={args.slug}
            type={"text"}
          />

          <CmsEntryEditableField
            data-plasmic-name={"text32"}
            data-plasmic-override={overrides.text32}
            className={classNames("__wab_instance", sty.text32)}
            color={"black"}
            field={"text3"}
            fontSize={"_16Px"}
            fontWeight={"normal"}
            slug={args.slug}
            type={"text"}
          />

          <form
            data-plasmic-name={"form"}
            data-plasmic-override={overrides.form}
            action={
              "https://hook.us1.make.com/5mordka6hk6nytd9doqnbe6kbf4r3drk"
            }
            className={classNames(projectcss.all, sty.form)}
            method={"post"}
          >
            <TextInput
              data-plasmic-name={"text43"}
              data-plasmic-override={overrides.text43}
              aria-label={"email"}
              className={classNames("__wab_instance", sty.text43)}
              name={"field1"}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["text43", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"\ud83d\udce7 Your Email Address"}
              required={true}
              value={generateStateValueProp($state, ["text43", "value"]) ?? ""}
            />

            <TextInput
              data-plasmic-name={"text53"}
              data-plasmic-override={overrides.text53}
              aria-label={"email"}
              className={classNames("__wab_instance", sty.text53)}
              name={"field2"}
              onChange={(...eventArgs) => {
                generateStateOnChangeProp($state, ["text53", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={" \u260e\ufe0f Your Phone Number"}
              required={true}
              value={generateStateValueProp($state, ["text53", "value"]) ?? ""}
            />

            <Button
              data-plasmic-name={"text63"}
              data-plasmic-override={overrides.text63}
              className={classNames("__wab_instance", sty.text63)}
              color={undefined}
              submitsForm={false}
            >
              <CmsQueryRepeater
                data-plasmic-name={"text22Old2"}
                data-plasmic-override={overrides.text22Old2}
                className={classNames("__wab_instance", sty.text22Old2)}
                desc={false}
                emptyMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <div
                        data-plasmic-name={"text"}
                        data-plasmic-override={overrides.text}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text
                        )}
                      >
                        {"No matching published entries found."}
                      </div>
                    )}
                  </DataCtxReader__>
                }
                filterField={"_id"}
                filterValue={(() => {
                  try {
                    return $props.slug;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                forceEmptyState={false}
                forceLoadingState={false}
                limit={0}
                loadingMessage={
                  <DataCtxReader__>
                    {$ctx => (
                      <Embed
                        data-plasmic-name={"embedHtml"}
                        data-plasmic-override={overrides.embedHtml}
                        className={classNames("__wab_instance", sty.embedHtml)}
                        code={
                          '<svg version="1.1" style="border-radius: 20px">\n    <defs>\n        <linearGradient id="graywave1" x1="0%" y1="0%" x2="100%" y2="100%">\n            <stop style="stop-color:#eee;stop-opacity:0.5" offset="0"/>\n            <stop style="stop-color:#ccc;stop-opacity:0.5" offset="0.5"/>\n            <stop style="stop-color:#eee;stop-opacity:0.5" offset="1.0"/>\n        </linearGradient>\n        <linearGradient id="graywave2" x1="0%" y1="0%" x2="100%" y2="100%">\n            <stop style="stop-color:#ccc;stop-opacity:0.5" offset="0"/>\n            <stop style="stop-color:#eee;stop-opacity:0.5" offset="0.5"/>\n            <stop style="stop-color:#ccc;stop-opacity:0.5" offset="1.0"/>\n        </linearGradient>\n    </defs>\n    <rect style="fill:url(#graywave1);fill-opacity:1;fill-rule:evenodd;" id="loaderrect1" width="100%" height="100%" x="-200%" y="0"/>\n    <rect style="fill:url(#graywave2);fill-opacity:1;fill-rule:evenodd;" id="loaderrect2" width="100%" height="100%" x="-100%" y="0"/>\n    <rect style="fill:url(#graywave1);fill-opacity:1;fill-rule:evenodd;" id="loaderrect3" width="100%" height="100%" x="0" y="0"/>\n    <animate xlink:href="#loaderrect1" attributename="x" from="-200%" to="0%" dur="0.8s" begin="0s" fill="freeze" repeatcount="indefinite"/>\n    <animate xlink:href="#loaderrect2" attributename="x" from="-100%" to="100%" dur="0.8s" begin="0s" fill="freeze" repeatcount="indefinite"/>\n    <animate xlink:href="#loaderrect3" attributename="x" from="0%" to="200%" dur="0.8s" begin="0s" fill="freeze" repeatcount="indefinite"/>\n</svg>\n'
                        }
                      />
                    )}
                  </DataCtxReader__>
                }
                noAutoRepeat={false}
                noLayout={false}
                useDraft={false}
              >
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wrWv4)}
                    >
                      <CmsRowField
                        data-plasmic-name={"cmsEntryField"}
                        data-plasmic-override={overrides.cmsEntryField}
                        className={classNames(
                          "__wab_instance",
                          sty.cmsEntryField
                        )}
                        field={"text2"}
                        themeResetClassName={classNames(
                          projectcss.root_reset,
                          projectcss.root_reset_tags,
                          projectcss.plasmic_default_styles,
                          projectcss.plasmic_mixins,
                          projectcss.plasmic_tokens,
                          plasmic_antd_5_hostless_css.plasmic_tokens,
                          plasmic_plasmic_rich_components_css.plasmic_tokens,
                          plasmic_legacy_feed_page_designs_css.plasmic_tokens
                        )}
                      />
                    </div>
                  )}
                </DataCtxReader__>
              </CmsQueryRepeater>
              <CmsEntryEditableField
                data-plasmic-name={"text223"}
                data-plasmic-override={overrides.text223}
                className={classNames("__wab_instance", sty.text223)}
                color={"white"}
                field={"text2"}
                fontSize={"_22Px"}
                fontWeight={"medium"}
                slug={args.slug}
                type={"text"}
              />
            </Button>
            <div className={classNames(projectcss.all, sty.freeBox__omQxE)} />

            <div className={classNames(projectcss.all, sty.freeBox__wThoM)}>
              <div
                data-plasmic-name={"disclaimer5"}
                data-plasmic-override={overrides.disclaimer5}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.disclaimer5
                )}
              >
                {
                  "I agree to receive recurring automated marketing text messages (e.g. cart reminders) at the phone number provided. Consent is not a condition to purchase. Msg & data rates may apply. Msg frequency varies. Reply HELP for help and STOP to cancel. View our Privacy Policy and Terms of Service."
                }
              </div>
            </div>
          </form>
        </div>
        <div
          data-plasmic-name={"rightColumnDesktopOnly"}
          data-plasmic-override={overrides.rightColumnDesktopOnly}
          className={classNames(projectcss.all, sty.rightColumnDesktopOnly)}
        >
          <div className={classNames(projectcss.all, sty.freeBox___6Ser4)}>
            <CmsEntryEditableField
              data-plasmic-name={"image13"}
              data-plasmic-override={overrides.image13}
              borderRadius={"_10Px"}
              className={classNames("__wab_instance", sty.image13)}
              field={"image1"}
              slug={args.slug}
              type={"image"}
            />

            <div className={classNames(projectcss.all, sty.freeBox__e3Le0)}>
              <CmsEntryEditableField
                data-plasmic-name={"text73"}
                data-plasmic-override={overrides.text73}
                className={classNames("__wab_instance", sty.text73)}
                field={"text7"}
                fontSize={"_25Px"}
                fontWeight={"bold"}
                slug={args.slug}
                type={"text"}
              />

              <CmsEntryEditableField
                data-plasmic-name={"text83"}
                data-plasmic-override={overrides.text83}
                className={classNames("__wab_instance", sty.text83)}
                color={"darkGrey"}
                field={"text8"}
                fontSize={"_16Px"}
                fontWeight={"normal"}
                slug={args.slug}
                type={"text"}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__x7QWu)} />

          <div
            data-plasmic-name={"iconValue11"}
            data-plasmic-override={overrides.iconValue11}
            className={classNames(projectcss.all, sty.iconValue11)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__qMjbu)}>
              <CmsEntryEditableField
                data-plasmic-name={"image22"}
                data-plasmic-override={overrides.image22}
                className={classNames("__wab_instance", sty.image22)}
                field={"image2"}
                slug={args.slug}
                type={"image"}
              />

              <CmsEntryEditableField
                data-plasmic-name={"text92"}
                data-plasmic-override={overrides.text92}
                className={classNames("__wab_instance", sty.text92)}
                color={"darkGrey"}
                field={"text9"}
                fontSize={"_18Px"}
                fontWeight={"normal"}
                slug={args.slug}
                type={"text"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zsnx9)}>
              <CmsEntryEditableField
                data-plasmic-name={"image32"}
                data-plasmic-override={overrides.image32}
                className={classNames("__wab_instance", sty.image32)}
                field={"image2"}
                slug={args.slug}
                type={"image"}
              />

              <CmsEntryEditableField
                data-plasmic-name={"text102"}
                data-plasmic-override={overrides.text102}
                className={classNames("__wab_instance", sty.text102)}
                color={"darkGrey"}
                field={"text10"}
                fontSize={"_18Px"}
                fontWeight={"normal"}
                slug={args.slug}
                type={"text"}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__txDep)}>
              <CmsEntryEditableField
                data-plasmic-name={"image42"}
                data-plasmic-override={overrides.image42}
                className={classNames("__wab_instance", sty.image42)}
                field={"image2"}
                slug={args.slug}
                type={"image"}
              />

              <CmsEntryEditableField
                data-plasmic-name={"text112"}
                data-plasmic-override={overrides.text112}
                className={classNames("__wab_instance", sty.text112)}
                color={"darkGrey"}
                field={"text11"}
                fontSize={"_18Px"}
                fontWeight={"normal"}
                slug={args.slug}
                type={"text"}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___63Vpf)} />
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "leftColumn",
    "logo2",
    "rightColumnMobileOnly",
    "image14",
    "text74",
    "text84",
    "iconValue12",
    "image23",
    "text93",
    "image33",
    "text103",
    "image43",
    "text113",
    "text14",
    "text23",
    "text32",
    "form",
    "text43",
    "text53",
    "text63",
    "text22Old2",
    "cmsEntryField",
    "text",
    "embedHtml",
    "text223",
    "disclaimer5",
    "rightColumnDesktopOnly",
    "image13",
    "text73",
    "text83",
    "iconValue11",
    "image22",
    "text92",
    "image32",
    "text102",
    "image42",
    "text112"
  ],
  leftColumn: [
    "leftColumn",
    "logo2",
    "rightColumnMobileOnly",
    "image14",
    "text74",
    "text84",
    "iconValue12",
    "image23",
    "text93",
    "image33",
    "text103",
    "image43",
    "text113",
    "text14",
    "text23",
    "text32",
    "form",
    "text43",
    "text53",
    "text63",
    "text22Old2",
    "cmsEntryField",
    "text",
    "embedHtml",
    "text223",
    "disclaimer5"
  ],
  logo2: ["logo2"],
  rightColumnMobileOnly: [
    "rightColumnMobileOnly",
    "image14",
    "text74",
    "text84",
    "iconValue12",
    "image23",
    "text93",
    "image33",
    "text103",
    "image43",
    "text113"
  ],
  image14: ["image14"],
  text74: ["text74"],
  text84: ["text84"],
  iconValue12: [
    "iconValue12",
    "image23",
    "text93",
    "image33",
    "text103",
    "image43",
    "text113"
  ],
  image23: ["image23"],
  text93: ["text93"],
  image33: ["image33"],
  text103: ["text103"],
  image43: ["image43"],
  text113: ["text113"],
  text14: ["text14"],
  text23: ["text23"],
  text32: ["text32"],
  form: [
    "form",
    "text43",
    "text53",
    "text63",
    "text22Old2",
    "cmsEntryField",
    "text",
    "embedHtml",
    "text223",
    "disclaimer5"
  ],
  text43: ["text43"],
  text53: ["text53"],
  text63: [
    "text63",
    "text22Old2",
    "cmsEntryField",
    "text",
    "embedHtml",
    "text223"
  ],
  text22Old2: ["text22Old2", "cmsEntryField", "text", "embedHtml"],
  cmsEntryField: ["cmsEntryField"],
  text: ["text"],
  embedHtml: ["embedHtml"],
  text223: ["text223"],
  disclaimer5: ["disclaimer5"],
  rightColumnDesktopOnly: [
    "rightColumnDesktopOnly",
    "image13",
    "text73",
    "text83",
    "iconValue11",
    "image22",
    "text92",
    "image32",
    "text102",
    "image42",
    "text112"
  ],
  image13: ["image13"],
  text73: ["text73"],
  text83: ["text83"],
  iconValue11: [
    "iconValue11",
    "image22",
    "text92",
    "image32",
    "text102",
    "image42",
    "text112"
  ],
  image22: ["image22"],
  text92: ["text92"],
  image32: ["image32"],
  text102: ["text102"],
  image42: ["image42"],
  text112: ["text112"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  leftColumn: "div";
  logo2: typeof CmsEntryEditableField;
  rightColumnMobileOnly: "div";
  image14: typeof CmsEntryEditableField;
  text74: typeof CmsEntryEditableField;
  text84: typeof CmsEntryEditableField;
  iconValue12: "div";
  image23: typeof CmsEntryEditableField;
  text93: typeof CmsEntryEditableField;
  image33: typeof CmsEntryEditableField;
  text103: typeof CmsEntryEditableField;
  image43: typeof CmsEntryEditableField;
  text113: typeof CmsEntryEditableField;
  text14: typeof CmsEntryEditableField;
  text23: typeof CmsEntryEditableField;
  text32: typeof CmsEntryEditableField;
  form: "form";
  text43: typeof TextInput;
  text53: typeof TextInput;
  text63: typeof Button;
  text22Old2: typeof CmsQueryRepeater;
  cmsEntryField: typeof CmsRowField;
  text: "div";
  embedHtml: typeof Embed;
  text223: typeof CmsEntryEditableField;
  disclaimer5: "div";
  rightColumnDesktopOnly: "div";
  image13: typeof CmsEntryEditableField;
  text73: typeof CmsEntryEditableField;
  text83: typeof CmsEntryEditableField;
  iconValue11: "div";
  image22: typeof CmsEntryEditableField;
  text92: typeof CmsEntryEditableField;
  image32: typeof CmsEntryEditableField;
  text102: typeof CmsEntryEditableField;
  image42: typeof CmsEntryEditableField;
  text112: typeof CmsEntryEditableField;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSqueezePlasmicCmsHypernova2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs;
    args?: PlasmicSqueezePlasmicCmsHypernova2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit< // Specify variants directly as props
    PlasmicSqueezePlasmicCmsHypernova2__VariantsArgs,
    ReservedPropsType
  > &
    /* Specify args directly as props*/ Omit<
      PlasmicSqueezePlasmicCmsHypernova2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSqueezePlasmicCmsHypernova2__ArgProps,
          internalVariantPropNames:
            PlasmicSqueezePlasmicCmsHypernova2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSqueezePlasmicCmsHypernova2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSqueezePlasmicCmsHypernova2";
  } else {
    func.displayName = `PlasmicSqueezePlasmicCmsHypernova2.${nodeName}`;
  }
  return func;
}

export const PlasmicSqueezePlasmicCmsHypernova2 = Object.assign(
  // Top-level PlasmicSqueezePlasmicCmsHypernova2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    leftColumn: makeNodeComponent("leftColumn"),
    logo2: makeNodeComponent("logo2"),
    rightColumnMobileOnly: makeNodeComponent("rightColumnMobileOnly"),
    image14: makeNodeComponent("image14"),
    text74: makeNodeComponent("text74"),
    text84: makeNodeComponent("text84"),
    iconValue12: makeNodeComponent("iconValue12"),
    image23: makeNodeComponent("image23"),
    text93: makeNodeComponent("text93"),
    image33: makeNodeComponent("image33"),
    text103: makeNodeComponent("text103"),
    image43: makeNodeComponent("image43"),
    text113: makeNodeComponent("text113"),
    text14: makeNodeComponent("text14"),
    text23: makeNodeComponent("text23"),
    text32: makeNodeComponent("text32"),
    form: makeNodeComponent("form"),
    text43: makeNodeComponent("text43"),
    text53: makeNodeComponent("text53"),
    text63: makeNodeComponent("text63"),
    text22Old2: makeNodeComponent("text22Old2"),
    cmsEntryField: makeNodeComponent("cmsEntryField"),
    text: makeNodeComponent("text"),
    embedHtml: makeNodeComponent("embedHtml"),
    text223: makeNodeComponent("text223"),
    disclaimer5: makeNodeComponent("disclaimer5"),
    rightColumnDesktopOnly: makeNodeComponent("rightColumnDesktopOnly"),
    image13: makeNodeComponent("image13"),
    text73: makeNodeComponent("text73"),
    text83: makeNodeComponent("text83"),
    iconValue11: makeNodeComponent("iconValue11"),
    image22: makeNodeComponent("image22"),
    text92: makeNodeComponent("text92"),
    image32: makeNodeComponent("image32"),
    text102: makeNodeComponent("text102"),
    image42: makeNodeComponent("image42"),
    text112: makeNodeComponent("text112"),

    // Metadata about props expected for PlasmicSqueezePlasmicCmsHypernova2
    internalVariantProps: PlasmicSqueezePlasmicCmsHypernova2__VariantProps,
    internalArgProps: PlasmicSqueezePlasmicCmsHypernova2__ArgProps
  }
);

export default PlasmicSqueezePlasmicCmsHypernova2;
/* prettier-ignore-end */
